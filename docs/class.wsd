@startuml Fishing System Class Diagram
title Діаграма класів системи "Рибальство"

' Абстрактний клас
abstract class УчасникРибалки {
  # {abstract} ім'я: String
  # {abstract} ідентифікатор: int
  # датаРеєстрації: Date
  + {abstract} УчасникРибалки(ім'я: String, id: int)
  + {abstract} отриматиІнформацію(): String
  + {abstract} виконатиДію(): void
}

' Інтерфейс
interface IПланВиходу {
  + {abstract} плануватиВихід(дата: Date): boolean
  + {abstract} перевіритиУмови(): String
  + {abstract} отриматиРекомендації(): String
}

' Основні класи
class Рибалка {
  - досвід: int
  - ліцензія: String
  - рівень: String
  - контактнийТелефон: String
  + Рибалка(ім'я: String, id: int, ліцензія: String)
  + перевіритиКартуГлибин(водойма: Водойма): Map<Point, Double>
  + перевіритиТочкиКльову(водойма: Водойма): List<Point>
  + зареєструватиВилов(риба: Риба, журнал: ЖурналВилову): void
  + плануватиВихід(водойма: Водойма, дата: Date): ВихідНаВоду
  + {final} отриматиСтатистику(): String
}

class Сенсор {
  - типСенсора: String
  - точність: double
  - стан: boolean
  - останняКалібровка: Date
  + Сенсор(ім'я: String, id: int, тип: String)
  + фіксуватиТемпературу(водойма: Водойма): double
  + фіксуватиЯкістьВоди(водойма: Водойма): ЯкістьВоди
  + калібрувати(): boolean
  + отриматиДані(): Map<String, Object>
}

class Еколог {
  - спеціалізація: String
  - організація: String
  - рівеньДоступу: int
  - контактнийEmail: String
  + Еколог(ім'я: String, id: int, спеціалізація: String)
  + отриматиЗвіт(водойма: Водойма): Звіт
  + аналізуватиДані(сенсори: List<Сенсор>): String
  + перевіритиЯкістьВоди(водойма: Водойма): boolean
  + надатиРекомендації(): List<String>
}

' Додаткові класи
class Водойма {
  - назва: String
  - площа: double
  - максимальнаГлибина: double
  - типВодойми: String
  - координати: String
  + Водойма(назва: String, площа: double)
  + отриматиКартуГлибин(): Map<Point, Double>
  + отриматиТочкиКльову(): List<Point>
  + оновитиДаніСенсорів(сенсор: Сенсор): void
  + отриматиІнформацію(): String
}

class ВихідНаВоду {
  - id: int
  - дата: Date
  - тривалість: int
  - метеоумови: String
  - статус: String
  - локація: String
  + ВихідНаВоду(дата: Date, тривалість: int)
  + планувати(рибалка: Рибалка, водойма: Водойма): boolean
  + записатиРезультат(журнал: ЖурналВилову): void
  + отриматиПрогнозПогоди(служба: СлужбаПогоди): String
  + завершитиВихід(): void
}

class ЖурналВилову {
  - id: int
  - датаСтворення: Date
  - версія: String
  - записи: List<ЗаписВилову>
  + ЖурналВилову()
  + додатиЗапис(запис: ЗаписВилову): void
  + отриматиСтатистику(рибалка: Рибалка): String
  + {final} експортуватиЗвіт(формат: String): String
  + знайтиЗаписиЗаПеріод(з: Date, по: Date): List<ЗаписВилову>
}

class СлужбаПогоди {
  - APIключ: String
  - джерело: String
  - оновлення: Date
  - регіон: String
  + СлужбаПогоди(APIключ: String)
  + отриматиПрогноз(місце: String, дата: Date): String
  + перевіритиУмови(локація: String): boolean
  + отриматиПопередження(): List<String>
  + оновитиДані(): void
}

class Риба {
  - вид: String
  - вага: double
  - розмір: double
  - сезон: String
  - мінімальнийРозмір: double
  + Риба(вид: String, вага: double, розмір: double)
  + отриматиІнформацію(): String
  + перевіритиДопустимість(): boolean
  + отриматиСезон(): String
}

class ЗаписВилову {
  - id: int
  - дата: Date
  - кількість: int
  - примітки: String
  + ЗаписВилову(дата: Date, риба: Риба)
  + додатиПримітку(примітка: String): void
  + отриматиІнформацію(): String
}

class ЯкістьВоди {
  - pH: double
  - кисень: double
  - прозорість: double
  - температура: double
  + ЯкістьВоди(pH: double, кисень: double)
  + перевіритиНорму(): boolean
  + отриматиПоказники(): Map<String, Double>
}

class Звіт {
  - id: int
  - датаГенерації: Date
  - тип: String
  - дані: Map<String, Object>
  + Звіт(тип: String)
  + додатиДані(ключ: String, значення: Object): void
  + згенеруватиЗвіт(): String
  + експортувати(формат: String): boolean
}

' Зв'язки наслідування
УчасникРибалки <|-- Рибалка
УчасникРибалки <|-- Сенсор
УчасникРибалки <|-- Еколог

' Зв'язки реалізації інтерфейсу
IПланВиходу <|.. ВихідНаВоду
IПланВиходу <|.. СлужбаПогоди

' Зв'язки агрегації
Водойма o-- "1..*" ВихідНаВоду
Рибалка o-- "0..*" ВихідНаВоду

' Зв'язки композиції
ЖурналВилову *-- "0..*" ЗаписВилову
ЗаписВилову *-- "1..*" Риба
ВихідНаВоду *-- "1" ЖурналВилову

' Зв'язки залежності
Рибалка --> Водойма
Рибалка --> ЖурналВилову
ВихідНаВоду --> СлужбаПогоди
Еколог --> Сенсор
Еколог --> Водойма
Еколог --> Звіт
Сенсор --> Водойма
Сенсор --> ЯкістьВоди
Водойма --> ЯкістьВоди

note top of УчасникРибалки
  <b>Абстрактний клас</b>
  Інкапсулює спільну поведінку
  всіх учасників системи
end note

note right of IПланВиходу
  <b>Інтерфейс</b>
  Визначає контракт для
  планування виходів на воду
end note

note left of Рибалка
  <b>Фінальний метод:</b>
  отриматиСтатистику()
end note

note right of ЖурналВилову
  <b>Фінальний метод:</b>
  експортуватиЗвіт()
end note

legend bottom
  <b>Типи зв'язків:</b>
  | Наслідування | Реалізація | Агрегація | Композиція | Залежність |
  | <:-- | <.. | o-- | *-- | --> |
end legend

@enduml